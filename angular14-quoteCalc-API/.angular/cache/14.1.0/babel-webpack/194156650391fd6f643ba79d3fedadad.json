{"ast":null,"code":"// so it doesn't throw if no window or matchMedia\nvar w = typeof window !== 'undefined' ? window : {\n  screen: {},\n  navigator: {}\n};\n\nvar matchMedia = (w.matchMedia || function () {\n  return {\n    matches: false\n  };\n}).bind(w); // passive events test\n// adapted from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n\n\nvar passiveOptionAccessed = false;\nvar options = {\n  get passive() {\n    return passiveOptionAccessed = true;\n  }\n\n}; // have to set and remove a no-op listener instead of null\n// (which was used previously), because Edge v15 throws an error\n// when providing a null callback.\n// https://github.com/rafgraph/detect-passive-events/pull/3\n// eslint-disable-next-line @typescript-eslint/no-empty-function\n\nvar noop = function () {};\n\nw.addEventListener && w.addEventListener('p', noop, options);\nw.removeEventListener && w.removeEventListener('p', noop, false);\nvar supportsPassiveEvents = passiveOptionAccessed;\nvar supportsPointerEvents = ('PointerEvent' in w);\nvar onTouchStartInWindow = ('ontouchstart' in w);\nvar touchEventInWindow = ('TouchEvent' in w); // onTouchStartInWindow is the old-old-legacy way to determine a touch device\n// and many websites interpreted it to mean that the device is a touch only phone,\n// so today browsers on a desktop/laptop computer with a touch screen (primary input mouse)\n// have onTouchStartInWindow as false (to prevent from being confused with a\n// touchOnly phone) even though they support the TouchEvents API, so need to check\n// both onTouchStartInWindow and touchEventInWindow for TouchEvent support,\n// however, some browsers (chromium) support the TouchEvents API even when running on\n// a mouse only device (touchEventInWindow true, but onTouchStartInWindow false)\n// so the touchEventInWindow check needs to include an coarse pointer media query\n\nvar supportsTouchEvents = onTouchStartInWindow || touchEventInWindow && matchMedia('(any-pointer: coarse)').matches;\nvar hasTouch = (w.navigator.maxTouchPoints || 0) > 0 || supportsTouchEvents; // userAgent is used as a backup to correct for known device/browser bugs\n// and when the browser doesn't support interaction media queries (pointer and hover)\n// see https://caniuse.com/css-media-interaction\n\nvar userAgent = w.navigator.userAgent || ''; // iPads now support a mouse that can hover, however the media query interaction\n// feature results always say iPads only have a coarse pointer that can't hover\n// even when a mouse is connected (anyFine and anyHover are always false),\n// this unfortunately indicates a touch only device but iPads should\n// be classified as a hybrid device, so determine if it is an iPad\n// to indicate it should be treated as a hybrid device with anyHover true\n\nvar isIPad = matchMedia('(pointer: coarse)').matches && // both iPad and iPhone can \"request desktop site\", which sets the userAgent to Macintosh\n// so need to check both userAgents to determine if it is an iOS device\n// and screen size to separate iPad from iPhone\n/iPad|Macintosh/.test(userAgent) && Math.min(w.screen.width || 0, w.screen.height || 0) >= 768;\nvar hasCoarsePrimaryPointer = (matchMedia('(pointer: coarse)').matches || // if the pointer is not coarse and not fine then the browser doesn't support\n// interaction media queries (see https://caniuse.com/css-media-interaction)\n// so if it has onTouchStartInWindow assume it has a coarse primary pointer\n!matchMedia('(pointer: fine)').matches && onTouchStartInWindow) && // bug in firefox (as of v81) on hybrid windows devices where the interaction media queries\n// always indicate a touch only device (only has a coarse pointer that can't hover)\n// so assume that the primary pointer is not coarse for firefox windows\n!/Windows.*Firefox/.test(userAgent);\nvar hasAnyHoverOrAnyFinePointer = matchMedia('(any-pointer: fine)').matches || matchMedia('(any-hover: hover)').matches || // iPads might have an input device that can hover, so assume it has anyHover\nisIPad || // if no onTouchStartInWindow then the browser is indicating that it is not a touch only device\n// see above note for supportsTouchEvents\n!onTouchStartInWindow; // a hybrid device is one that both hasTouch and\n// any input can hover or has a fine pointer, or the primary pointer is not coarse\n// if it's not a hybrid, then if it hasTouch it's touchOnly, otherwise it's mouseOnly\n\nvar deviceType = hasTouch && (hasAnyHoverOrAnyFinePointer || !hasCoarsePrimaryPointer) ? 'hybrid' : hasTouch ? 'touchOnly' : 'mouseOnly';\nvar primaryInput = deviceType === 'mouseOnly' ? 'mouse' : deviceType === 'touchOnly' ? 'touch' : // if the device is a hybrid, then if the primary pointer is coarse\n// assume the primaryInput is touch, otherwise assume it's mouse\nhasCoarsePrimaryPointer ? 'touch' : 'mouse';\nexport { deviceType, primaryInput, supportsPassiveEvents, supportsPointerEvents, supportsTouchEvents };","map":{"version":3,"names":["w","window","screen","navigator","matchMedia","matches","bind","passiveOptionAccessed","options","passive","noop","addEventListener","removeEventListener","supportsPassiveEvents","supportsPointerEvents","onTouchStartInWindow","touchEventInWindow","supportsTouchEvents","hasTouch","maxTouchPoints","userAgent","isIPad","test","Math","min","width","height","hasCoarsePrimaryPointer","hasAnyHoverOrAnyFinePointer","deviceType","primaryInput"],"sources":["C:/Users/Marc/source/repos/QuoteCalc/UI/angular14-quoteCalc-API/node_modules/detect-it/dist/detect-it.esm.js"],"sourcesContent":["// so it doesn't throw if no window or matchMedia\r\nvar w = typeof window !== 'undefined' ? window : { screen: {}, navigator: {} };\r\nvar matchMedia = (w.matchMedia || (function () { return ({ matches: false }); })).bind(w);\r\n// passive events test\r\n// adapted from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\r\nvar passiveOptionAccessed = false;\r\nvar options = {\r\n    get passive() {\r\n        return (passiveOptionAccessed = true);\r\n    },\r\n};\r\n// have to set and remove a no-op listener instead of null\r\n// (which was used previously), because Edge v15 throws an error\r\n// when providing a null callback.\r\n// https://github.com/rafgraph/detect-passive-events/pull/3\r\n// eslint-disable-next-line @typescript-eslint/no-empty-function\r\nvar noop = function () { };\r\nw.addEventListener && w.addEventListener('p', noop, options);\r\nw.removeEventListener && w.removeEventListener('p', noop, false);\r\nvar supportsPassiveEvents = passiveOptionAccessed;\r\nvar supportsPointerEvents = 'PointerEvent' in w;\r\nvar onTouchStartInWindow = 'ontouchstart' in w;\r\nvar touchEventInWindow = 'TouchEvent' in w;\r\n// onTouchStartInWindow is the old-old-legacy way to determine a touch device\r\n// and many websites interpreted it to mean that the device is a touch only phone,\r\n// so today browsers on a desktop/laptop computer with a touch screen (primary input mouse)\r\n// have onTouchStartInWindow as false (to prevent from being confused with a\r\n// touchOnly phone) even though they support the TouchEvents API, so need to check\r\n// both onTouchStartInWindow and touchEventInWindow for TouchEvent support,\r\n// however, some browsers (chromium) support the TouchEvents API even when running on\r\n// a mouse only device (touchEventInWindow true, but onTouchStartInWindow false)\r\n// so the touchEventInWindow check needs to include an coarse pointer media query\r\nvar supportsTouchEvents = onTouchStartInWindow ||\r\n    (touchEventInWindow && matchMedia('(any-pointer: coarse)').matches);\r\nvar hasTouch = (w.navigator.maxTouchPoints || 0) > 0 || supportsTouchEvents;\r\n// userAgent is used as a backup to correct for known device/browser bugs\r\n// and when the browser doesn't support interaction media queries (pointer and hover)\r\n// see https://caniuse.com/css-media-interaction\r\nvar userAgent = w.navigator.userAgent || '';\r\n// iPads now support a mouse that can hover, however the media query interaction\r\n// feature results always say iPads only have a coarse pointer that can't hover\r\n// even when a mouse is connected (anyFine and anyHover are always false),\r\n// this unfortunately indicates a touch only device but iPads should\r\n// be classified as a hybrid device, so determine if it is an iPad\r\n// to indicate it should be treated as a hybrid device with anyHover true\r\nvar isIPad = matchMedia('(pointer: coarse)').matches &&\r\n    // both iPad and iPhone can \"request desktop site\", which sets the userAgent to Macintosh\r\n    // so need to check both userAgents to determine if it is an iOS device\r\n    // and screen size to separate iPad from iPhone\r\n    /iPad|Macintosh/.test(userAgent) &&\r\n    Math.min(w.screen.width || 0, w.screen.height || 0) >= 768;\r\nvar hasCoarsePrimaryPointer = (matchMedia('(pointer: coarse)').matches ||\r\n    // if the pointer is not coarse and not fine then the browser doesn't support\r\n    // interaction media queries (see https://caniuse.com/css-media-interaction)\r\n    // so if it has onTouchStartInWindow assume it has a coarse primary pointer\r\n    (!matchMedia('(pointer: fine)').matches && onTouchStartInWindow)) &&\r\n    // bug in firefox (as of v81) on hybrid windows devices where the interaction media queries\r\n    // always indicate a touch only device (only has a coarse pointer that can't hover)\r\n    // so assume that the primary pointer is not coarse for firefox windows\r\n    !/Windows.*Firefox/.test(userAgent);\r\nvar hasAnyHoverOrAnyFinePointer = matchMedia('(any-pointer: fine)').matches ||\r\n    matchMedia('(any-hover: hover)').matches ||\r\n    // iPads might have an input device that can hover, so assume it has anyHover\r\n    isIPad ||\r\n    // if no onTouchStartInWindow then the browser is indicating that it is not a touch only device\r\n    // see above note for supportsTouchEvents\r\n    !onTouchStartInWindow;\r\n// a hybrid device is one that both hasTouch and\r\n// any input can hover or has a fine pointer, or the primary pointer is not coarse\r\n// if it's not a hybrid, then if it hasTouch it's touchOnly, otherwise it's mouseOnly\r\nvar deviceType = hasTouch && (hasAnyHoverOrAnyFinePointer || !hasCoarsePrimaryPointer)\r\n    ? 'hybrid'\r\n    : hasTouch\r\n        ? 'touchOnly'\r\n        : 'mouseOnly';\r\nvar primaryInput = deviceType === 'mouseOnly'\r\n    ? 'mouse'\r\n    : deviceType === 'touchOnly'\r\n        ? 'touch'\r\n        : // if the device is a hybrid, then if the primary pointer is coarse\r\n            // assume the primaryInput is touch, otherwise assume it's mouse\r\n            hasCoarsePrimaryPointer\r\n                ? 'touch'\r\n                : 'mouse';\n\nexport { deviceType, primaryInput, supportsPassiveEvents, supportsPointerEvents, supportsTouchEvents };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}